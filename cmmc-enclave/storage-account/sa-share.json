{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "storageAccountName": {
            "type": "string"
        },
        "accountType": {
            "type": "string",
            "metadata": {
                "description": ""
            },
            "allowedValues": [
                "Premium_LRS",
                "PremiumV2_ZRS",
                "PremiumV2_LRS",
                "Premium_ZRS",
                "StandardV2_GRS",
                "StandardV2_GZRS",
                "StandardV2_LRS",
                "StandardV2_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_LRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "Standard_ZRS" 
            ],
            "defaultValue" : "Premium_LRS"
        },
        "kind": {
            "type": "string",
            "metadata": {
                "description": ""
            },
            "allowedValues": [
                "BlobStorage",
                "BlockBlobStorage",
                "FileStorage",
                "Storage",
                "StorageV2"
            ],
            "defaultValue": "FileStorage"
        },
        "publicNetworkAccess": {
            "type": "string",
            "metadata": {
                "description": "Allow, disallow, or let Network Security Perimeter configuration to evaluate public network access to Storage Account" 
            },
            "allowedValues": [
               "Disabled",
               "Enabled",
               "SecuredByPerimeter"
            ],
            "defaultValue" : "Enabled"
        },
        "allowedVnetName": {
            "type": "string",
            "metadata": {
                "description": "The name of the virtual network that will be granted access to the Azure Storage Account."
            }
        },
        "subnetInAllowedVnetName": {
            "type": "string",
            "metadata": {
                "description" : "The name(s) of the specific subnets within the selected virtual network that will be granted access to the Azure Storage Account. Separate multiple subnets with commas."
            }

        },
        "allowedSubnetIpv4Cidr": {
            "type": "string",
            "metadata": {
                "description": "The IPv4 CIDR block(s) for the subnets within the specified virtual network. If multiple subnets are specified, they must be listed in the same order as the values in the subnetInAllowedVnetName parameter."
            }
        },
        "allowedSubnetIpv6Cidr": {
            "type": "string",
            "metadata": {
                "description": "The IPv6 CIDR block(s) for the subnets within the specified virtual network. If multiple subnets are specified, they must be listed in the same order as the values in the subnetInAllowedVnetName parameter."
            },
            "defaultValue": ""
        },
        "fileShareName": {
            "type": "string",
            "metadata" : {
                "description": "The name of the file share designated for storing FSLogix profile data."
            }
        },
        "fileShareQuota": {
            "type": "int",
            "metadata": {
                "description": "The provisioned size of the share, in gibibytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400."
            },
            "defaultValue": 512
        },
        "vaultName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Recovery Services Vault. (Should have the same location as the Storage Account containing the File Share to be protected in case of an existing Recovery Services Vault)."
            }
        },
        "policyName": {
            "type": "string",
            "metadata": {
                "description": "The name of the backup policy for the file share"
            }
        },
        "baseTime": {
            "type": "string",
            "defaultValue": "[utcNow('s')]"
        }
    },
    "variables": {
        "copy": [
			{
				"name": "subnetInAllowedVnetName",
				"count": "[length(split(parameters('subnetInAllowedVnetName'), ','))]",
				"input": "[trim(split(parameters('subnetInAllowedVnetName'), ',')[copyIndex('subnetInAllowedVnetName')])]"
			},
            {
				"name": "allowedSubnetIpv4Cidr",
				"count": "[length(split(parameters('allowedSubnetIpv4Cidr'), ','))]",
				"input": "[trim(split(parameters('allowedSubnetIpv4Cidr'), ',')[copyIndex('allowedSubnetIpv4Cidr')])]"
			},
            {
				"name": "allowedSubnetIpv6Cidr",
				"count": "[length(split(parameters('allowedSubnetIpv6Cidr'), ','))]",
				"input": "[trim(split(parameters('allowedSubnetIpv6Cidr'), ',')[copyIndex('allowedSubnetIpv6Cidr')])]"
			},
			{
				"name": "addressPrefixes",
				"count": "[length(split(parameters('allowedSubnetIpv4Cidr'), ','))]",
				"input": "[if(equals(parameters('allowedSubnetIpv6Cidr'),''), createArray(variables('allowedSubnetIpv4Cidr')[copyIndex('addressPrefixes')]), createArray(variables('allowedSubnetIpv4Cidr')[copyIndex('addressPrefixes')], variables('allowedSubnetIpv6Cidr')[copyIndex('addressPrefixes')]))]"
			}
		]
    },
    "resources": [
        {
            "name": "[concat(parameters('allowedVnetName'), '/', variables('subnetInAllowedVnetName')[copyIndex()])]",
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2023-04-01",
            "properties": {
                "addressPrefixes": "[variables('addressPrefixes')[copyIndex()]]",
                "serviceEndpoints": [
                    {
                        "service": "Microsoft.Storage"
                    }
                ]
            },
            "copy": {
                "name": "subnetCopy",
                "count": 2,
                "mode": "Serial"
            }
        },
        {
            "name": "[parameters('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2023-05-01",
            "tags": {
                "displayName": "[parameters('storageAccountName')]"
            },
            "location": "[resourceGroup().location]",
            "kind": "[parameters('kind')]",
            "properties": {
                "encryption": {
                    "keySource": "Microsoft.Storage",
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        },
                        "table": {
                            "enabled": true
                        },
                        "queue": {
                            "enabled": true
                        }
                    },
                    "requireInfrastructureEncryption": true
                },
                "largeFileSharesState": "Enabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Deny",
                    "ipRules": [],
                    "copy": [
                        {
                            "name": "virtualNetworkRules",
                            "count": "[length(variables('subnetInAllowedVnetName'))]",
                            "input": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('allowedVnetName'), variables('subnetInAllowedVnetName')[copyIndex('virtualNetworkRules')])]"
                            }
                        }
                    ]
                },
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
            },
            "sku": {
                "name": "[parameters('accountType')]"
            },
            "dependsOn": [
                "subnetCopy"
            ]
        },
        {
            "name": "[concat(parameters('storageAccountName'), '/default')]",
            "type": "Microsoft.Storage/storageAccounts/fileservices",
            "apiVersion": "2023-05-01",
            "properties": {
                "shareDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                }
            },
            "dependsOn": [
                "[parameters('storageAccountName')]"
            ]
        },
        {
            "name": "[concat(parameters('storageAccountName'), '/default/', parameters('fileShareName'))]",
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",  
            "apiVersion": "2023-05-01",
            "properties": {
                "accessTier": "Premium",
                "enabledProtocols": "SMB",
                "shareQuota": "[parameters('fileShareQuota')]"
            },
            "dependsOn": [
                "[parameters('storageAccountName')]"
            ]
        },
        {
            "type": "Microsoft.RecoveryServices/vaults",
            "apiVersion": "2020-02-02",
            "name": "[parameters('vaultName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "RS0",
                "tier": "Standard"
            },
            "properties": {},
            "resources": [
                {
                    "type": "backupPolicies",
                    "apiVersion": "2024-10-01",
                    "name": "[parameters('policyName')]",
                    "properties": {
                        "backupManagementType": "AzureStorage",
                        "workloadType": "AzureFileShare",
                        "schedulePolicy": {
                            "schedulePolicyType": "SimpleSchedulePolicy",
                            "scheduleRunFrequency": "Daily",
                            "scheduleRunTimes": [
                                "[format('{0}T22:00:00.000Z', split(parameters('baseTime'), 'T')[0])]"
                            ]
                        },
                        "timeZone": "Eastern Standard Time",
                        "retentionPolicy": {
                            "retentionPolicyType": "LongTermRetentionPolicy",
                            "dailySchedule": {
                                "retentionTimes": [
                                    "[format('{0}T22:00:00.000Z', split(parameters('baseTime'), 'T')[0])]"
                                ],
                                "retentionDuration": {
                                    "count": 14,
                                    "durationType": "Days"
                                }
                            },
                            "weeklySchedule": {
                                "daysOfTheWeek": [
                                    "Sunday"
                                ],
                                "retentionTimes": [
                                    "[format('{0}T22:00:00.000Z', split(parameters('baseTime'), 'T')[0])]"
                                ],
                                "retentionDuration": {
                                    "count": 4,
                                    "durationType": "Weeks"
                                }
                            },
                            "monthlySchedule": {
                                "retentionScheduleFormatType": "Weekly",
                                "retentionScheduleWeekly": {
                                    "daysOfTheWeek": [
                                        "Sunday"
                                    ],
                                    "weeksOfTheMonth": [
                                        "First"
                                    ]
                                },
                                "retentionTimes": [
                                    "[format('{0}T22:00:00.000Z', split(parameters('baseTime'), 'T')[0])]"
                                ],
                                "retentionDuration": {
                                    "count": 6,
                                    "durationType": "Months"
                                }
                            }
                        },
                        "protectedItemsCount": 0
                    },
                    "dependsOn": [
                        "[parameters('vaultName')]"
                    ]
                },
                {
                    "type": "backupFabrics/protectionContainers",
                    "apiVersion": "2024-10-01",
                    "name": "[format('{0}/storagecontainer;Storage;{1};{2}', 'Azure', resourceGroup().name, parameters('storageAccountName'))]",
                    "properties": {
                        "backupManagementType": "AzureStorage",
                        "containerType": "StorageContainer",
                        "sourceResourceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                    },
                    "dependsOn": [
                        "[parameters('vaultName')]"
                    ]
                },
                {
                    "type": "backupFabrics/protectionContainers/protectedItems",
                    "apiVersion": "2024-10-01",
                    "name": "[format('{0}/storagecontainer;Storage;{1};{2}/AzureFileShare;{3}', 'Azure', resourceGroup().name, parameters('storageAccountName'), parameters('fileShareName'))]",
                    "properties": {
                        "protectedItemType": "AzureFileShareProtectedItem",
                        "sourceResourceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                        "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('vaultName'), parameters('policyName'))]",
                        "isInlineInquiry": true
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', parameters('vaultName'), 'Azure', format('storagecontainer;Storage;{0};{1}', resourceGroup().name, parameters('storageAccountName')))]",
                        "[parameters('policyName')]",
                        "[parameters('vaultName')]"
                    ]
                }
            ],
            "dependsOn": [
                "[parameters('storageAccountName')]"
            ]
        }
        
    ],
    "outputs": {}
}